a <- c(1, 2, 3)
a
b <- c('a', 'b', 'c')
b
a + b
cube <- function(x, n) {
x^3
}
cube(3)
pow <- function(x = 4, n = 3) {
x^n
}
pow()
x <- 1:10
if(x > 5) {
x <- 0
}
x
library(datasets)
data(iris)
?iris
names(iris)
veiginica <- subset(iris, Species == 'veriginica')
virginica <- subset(iris, Species == 'virginica')
mean(virginica$Sepal.Length)
mean(iris[,1])
mean(iris$Sepal.Length)
mean(iris[,2])
mean(iris$Sepal.Width)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
by(iris[,1:4], Species, mean)
by(iris[,1:4], iris$Species, mean)
by(iris[, 1:4], iris$Species, mean)
library(datasets)
data(mtcars)
?mtcars
names(mtcars)
for (i in 1:10){
print(sprintf("Hello World %i.hello",i))
}
for (i in 1:10){
print(sprintf("Hello World %05i.hello",i))
}
for (i in 1:10){
print(sprintf("Hello World %02i.hello",i))
}
for (i in 1:10){
print(sprintf("Hello World %03i.hello",i))
}
?paste
paste('specdata', '/001.csv')
paste('specdata', '/001.csv', sep = "")
directory <- "specdata"
class(directory)
str(directory)
id <- as.charactor(1)
id <- as.char(1)
id <- as.string(1)
id <- as.character(1)
format("%03i", id)
id <- as.character(1, format("%03i"))
id
newid <- sprintf("%03i", id)
newid <- sprintf("%03s", id)
newid
id <- 1
newid <- sprintf("%03i", id)
newid
axis()
points()
save()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
plot(0, 0, main = expression("theta")
)
plot(0, 0, main = expression(theta))
set.seed(1)
rpois(5, 2)
?panel.xyplot()
?lines()
load(url("http://bit.ly/dasi_gss_data"))
gss[:, 1:10]
gss[, 1:10]
gss[1:10, 1:10]
boxplot(gss$race, gss$sei)
table(gss$race)
boxplot(gss$sex, gss$sei)
gss$sei[1:10]
gss$sei[11:30]
gss$sei[100:130]
gss$sei[200:230]
gss$sei[300:340]
?is.na
?subset
gss_sub <- subset(gss, sei !is.na)
gss_sub <- subset(gss, sei= !is.na)
gss_sub <- subset(gss, gss$sei= !is.na)
gss_sub <- subset(gss, gss$sei > 0)
gss_sub$sei[1:10]
table(gss$homosex)
table(gss$educ)
?table
table(gss$educ, useNA=="yes")
table(gss$educ, useNA=="ifany")
table(gss$educ, useNA ="ifany")
class(gss$educ)
table(gss$degree, useNA ="ifany")
?boxplot
boxplot(gss$sei~gss$degree)
table(gss$born, useNA="ifany")
boxplot(gss$sei~gss$born)
table(gss$parborn)
table(gss$parborn, useNA="ifany")
boxplot(gss$sei~gss$parborn)
boxplot(gss$sei~gss$race)
table(gss$helpnot, useNA="ifany")
summary(gss$income06)
summary(gss$coninc)
plot(gss$coninc)
hist(gss$coninc)
table(gss$jobmeans, gss$degree)
table(gss$jobmeans, gss$degree, useNA="ifany")
boxplot(gss$sei~gss$maedc)
boxplot(gss$maedc~gss$sei)
boxplot(gss$sei~gss$maeduc)
table(gss$maeduc, useNA="ifany")
plot(gss$degree, gss$maeduc)
hist(gss$educ)
summary(gss$educ)
plot(gss$degree, gss$paeduc)
barplot(gss$natmass)
?barplot
barplot(table(gss$natmass, useNA="ifany"))
boxplot(gss$natmass~gss$sei)
boxplot(gss$sei~gss$natmass)
boxplot(gss$sei~gss$natenvir)
boxplot(gss$sei~gss$degree)
boxplot(gss$coninc~gss$degree)
barplot(table(gss$degree, gss$natenvir))
?barplot
legend(legend=c(gss$degree))
barplot(table(gss$degree, gss$natenvir), legend(c(gss$degree)))
barplot(table(gss$degree, gss$natenvir), legend= c(gss$degree))
table(gss$degree)
gss[1:1;]
gss[1:1,]
barplot(table(gss$degree, gss$natenvir), legend.text= c(gss$degree))
counts <- table(gss$degree, gss$natenvir)
barplot(table(gss$degree, gss$natenvir), legend= rownames(counts))
table(gss$conbus)
table(gss$conbus, useNA="ifany")
boxplot(gss$sei~gss$conbus)
boxplot(gss$sei~gss$conbus, main="SEI vs. confid in Big Bussiness")
boxplot(gss$age~gss$conbus, main="age vs. confid in Big Bussiness")
boxplot(gss$coninc~gss$conbus, main="SEI vs. confid in Big Bussiness")
boxplot(gss$educ~gss$conbus, main="educ years vs. confid in Big Bussiness")
load(url("http://www.openintro.org/stat/data/ames.RData"))
area <- ames$Gr.Liv.Area
price <- ames$SalePrice
summary(area)
summary(price)
hist(area)
summary(sample(area, 50))
summary(sample(area, 100))
summary(sample(area, 1000))
summary(sample(area, 50))
sample_means_small <- rep(NA, 100)
for (i in 1:100) {
samp <- sample(area, 50)
sample_means_small[i] <- mean(samp)
print}
sample_means_small
mean(sample_means_small)
sample_means_small.1000 <- rep(NA, 100)
for (i in 1:100) {
samp <- sample(area, 1000)
sample_means_small[i] <- mean(samp)
print}
mean(sample_means_small.1000)
mean(sample_means_small.1000)
library(igraph)
install.packages("igraph")
library(igraph)
g <- graph.lattice( c(10,10) )
E(g)$weight <- runif(ecount(g))
ecound(g)
ecount(g)
?runif
E(g)$color <- "grey"
E(g)[ weight > 0.9 ]$color <- "red"
plot(g, vertex.size=2, vertex.label=NA, layout=layout.kamada.kawai,
edge.width=2+3*E(g)$weight)
library(igraph)
library(igraph)
set.seed(10)
X <- matrix(rpois(100, 1), 10, 10)
colnames(X) <- paste0("Guy_", 1:10)
rownames(X) <- c('The', 'quick', 'brown', 'fox', 'jumps',
'over', 'a', 'bot', 'named', 'Dason')
X #word frequency matrix
Y <- X >= 1
Y
Y <- apply(Y, 2, as, "numeric") #boolean matrix
Y
?apply
?as
rownames(Y) <- rownames(X)
Y
Z <- t(Y) %*% Y  #adjacency matrix
?t
Z
?%
5 %*% 3
5 * 3
g <- graph.adjacency(Z, weighted=TRUE, mode ='undirected')
plot(g)
g <- simplify(g)
plot(g)
V(g)$label <- V(g)$name
V(g)$degree <- degree(g)
plot(g)
V(g)$label
V(g)$name
V(g)$degree
library(knitr)
install.packages("knitr")
levels(gss$degree)
head(gss$sub)
head(gss_sub)
table(gss$degree, gss$finalter)
?table
table(gss$degree, gss$finalter, useNA="ifany")
summary(table(gss$degree, gss$finalter, useNA="ifany"))
ftable(table(gss$degree, gss$finalter, useNA="ifany"))
prop.table(gss$degree, gss$finalter, useNA="ifany")
prop.table(table(gss$degree, gss$finalter, useNA="ifany"))
R.version.string
?sprintf
id <- 1
sprintf("/%03i.csv", id)
id <- 10
sprintf("/%03i.csv", id)
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(c, 555, c)
c(z, 555, z)
z * 2 +100
mySqrt <- (z-1)^0.5
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
pi:10
15:1
?:
?':'
?`:`
seq(1,20)
seq(0, 10, by=0.5)
m7_seq <- seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times =40)
rep(c(1,2,3), times = 10)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55,-10,6)
tf <- num_vect < 1
tf
tf2 <- num_vect >= 6
tf2 <- (num_vect >= 6)
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Makiko")
my_name <- c(my_char, "Makiko")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
id <- 1:10
id
for (i in id) {print("Hello %i", i)}
for (i in id) {print("Hello i")}
?printf
?print
for (i in id) {sprintf("Hello %i", i)}
for (i in id) {printf("Hello %i", i)}
for (i in id) {print("Hello %2i", i)}
for (i in id) {print("Hello %2i" + i)}
setwd("~/GitHub/GettingCleaningData")
features <- read.csv("UCI HAR Dataset/features.txt", sep = " ", header = F)
training <- read.csv("UCI HAR Dataset/train/X_train.txt", sep = " ", header = F)
training <- read.csv("UCI HAR Dataset/train/X_train.txt", sep = " ", header = F)
test <- read.csv("UCI HAR Dataset/test/X_test.txt", sep = " ", header = F)
subjectTest <- read.csv("UCI HAR Dataset/test/subject_test.txt", sep = " ", header = F)
head(subjectTest)
tail(subjectTest)
str(subjectTest)
str(subjectTest$V1)
unique(subjectTest$V1)
subjectTrain <- read.csv("UCI HAR Dataset/train/subject_train.txt", sep = " ", header = F)
uniqie(subjectTrain$V1)
unique(subjectTrain$V1)
head(features)
head(test[1:2, 665:667])
str(test)
